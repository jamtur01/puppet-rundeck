#!/usr/bin/env ruby
#
# Copyright 2010, James Turnbull
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", "lib")))

require 'rubygems'
require 'optparse'
require 'puppet-rundeck'

options = {}

optparse = OptionParser.new do |opts|
  # Set a banner, displayed at the top
  # of the help screen.
  opts.banner = 'Usage: puppet-rundeck [options] ...'

  opts.separator ''
  opts.separator 'Configuration options:'
 
  options[:config_file] = "/etc/puppet/puppet.conf" 
  opts.on( '-c', '--config FILE', 'Specify the location of your Puppet configuration file') do |config_file|
    options[:config_file] = config_file
  end 

  options[:username] = ENV['USER']
  opts.on( '-u', '--username USERNAME', 'The Username for Rundeck to SSH as') do |username|
    options[:username] = username
  end

  options[:port] = 8144
  opts.on( '-p', '--port PORT', 'The port to run puppet-rundeck on') do |port|
    options[:port] = port
  end

  options[:ssh_port] = 22
  opts.on( '-P', '--ssh-port PORT', 'The default port used by sshd on your puppet nodes') do |ssh_port|
    options[:ssh_port] = ssh_port
  end

  opts.separator ""
  opts.separator "Common options:"
 
  opts.on_tail('-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

begin
  optparse.parse!
  PuppetRundeck.config_file = options[:config_file]
  PuppetRundeck.username = options[:username]
  PuppetRundeck.ssh_port = options[:ssh_port]
  PuppetRundeck.configure
  PuppetRundeck.run! :host => "localhost", :port => options[:port] 
rescue OptionParser::InvalidArgument, OptionParser::InvalidOption, OptionParser::MissingArgument
  puts $!.to_s
  puts optparse
  exit
end
